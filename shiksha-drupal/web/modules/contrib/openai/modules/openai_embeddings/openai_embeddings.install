<?php

/**
 * @file
 * Contains code to run install based tasks for the module.
 */

/**
 * Implements hook_schema().
 */
function openai_embeddings_schema() {
  $schema['openai_embeddings'] = [
    'description' => 'Stores embedding data from OpenAI in Drupal.',
    'fields' => [
      'id' => [
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'The openai_search record ID.',
      ],
      'entity_id' => [
        'description' => 'The entity id this record affects (1, 2, 3).',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ],
      'entity_type' => [
        'type' => 'varchar_ascii',
        'length' => 64,
        'not null' => TRUE,
        'description' => 'The entity type (node, paragraph, user, etc).',
      ],
      'bundle' => [
        'type' => 'varchar_ascii',
        'length' => 64,
        'not null' => TRUE,
        'description' => 'The entity bundle.',
      ],
      'field_name' => [
        'type' => 'varchar_ascii',
        'length' => 128,
        'description' => 'The field name the embedding was generated from (title, field_body, etc).',
      ],
      'field_delta' => [
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The field delta position this embedding was generated from.',
      ],
      'embedding' => [
        'mysql_type' => 'json',
        'pgsql_type' => 'jsonb',
        'size' => 'big',
        'description' => 'The embedding values from OpenAI.',
      ],
      'data' => [
        'mysql_type' => 'json',
        'pgsql_type' => 'jsonb',
        'not null' => FALSE,
        'size' => 'big',
        'description' => 'Usage and misc data returned from OpenAI. Useful for debugging or viewing how many tokens an embedding used.',
      ],
    ],
    'primary key' => [
      'id',
    ],
    'indexes' => [
      'entity_id' => [
        'entity_id',
      ],
      'entity_type' => [
        'entity_type',
      ],
      'bundle' => [
        'bundle',
      ],
      'field_name' => [
        'field_name',
      ],
      'field_delta' => [
        'field_delta',
      ],
    ],
  ];

  return $schema;
}

/**
 * Allow disabling of namespace, maintain status quo of false.
 */
function openai_embeddings_update_10001() {
  $config = \Drupal::configFactory()->getEditable('openai_embeddings.pinecone_client');
  if ($config->get('disable_namespace') === NULL) {
    $config->set('disable_namespace', FALSE);
    $config->save();
  }
}

/**
 * Move pinecone configuration to mapped embeddings configuration.
 */
function openai_embeddings_update_10002() {
  $pinecone_config = \Drupal::configFactory()->getEditable('openai_embeddings.pinecone_client');
  if ($pinecone_config) {

    // Move the pinecone config into the embeddings settings mapped data.
    $embeddings_config = \Drupal::configFactory()->getEditable('openai_embeddings.settings');
    $embeddings_config->set('vector_clients.pinecone.hostname', $pinecone_config->get('hostname'));
    $embeddings_config->set('vector_clients.pinecone.api_key', $pinecone_config->get('api_key'));
    $embeddings_config->set('vector_clients.pinecone.disable_namespace', $pinecone_config->get('disable_namespace'));
    $embeddings_config->save();

    // Delete the original pinecone config.
    $pinecone_config->delete();
  }
}
